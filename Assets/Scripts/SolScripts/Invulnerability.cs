using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Invulnerability : MonoBehaviour
{
    public int circlesNeeded;
    public GameObject ballOne;
    public int ballOneScore;
    public GameObject ballTwo;
    public int ballTwoScore;
    public GameObject ballThree;
    public int ballThreeScore;
    public int mainCharacterScore;
    public int allScore;
    public int ballInvCharges;
    public int ballInvCounter;
    public int ballInvPrev;
    public GameObject mainCharacter;
    SpriteRenderer mat;
    Color32 firstColor;
    Color32 secondColor;
    public bool canUseAbility;
    public string abilityToCheck;
    public bool hasSpacebar;
    //public bool hasSpacebarUpgrade;

    void Awake()
    {
        ballOne = GameObject.Find("Circle1");
        ballTwo = GameObject.Find("OrbitCircle");
        ballThree = GameObject.Find("OrbitCircle (1)");
        mainCharacter = GameObject.Find("Character");
        mat = mainCharacter.GetComponent<SpriteRenderer>();
        firstColor = new Color32(53, 103, 250, 255);
        secondColor = new Color32(219, 52, 255, 255);
        circlesNeeded = 15;
        hasSpacebar = GameObject.Find("GlobalScripts").GetComponent<SolPlayerStats>().getIfPurchased("spacebarAbility");
    }

    void Update()
    {
        
        ballOneScore = ballOne.GetComponent<DestroyObject>().ballsHit;
        ballTwoScore = ballTwo.GetComponent<DestroyObject>().ballsHit;
        ballThreeScore = ballThree.GetComponent<DestroyObject>().ballsHit;
        mainCharacterScore = mainCharacter.GetComponent<CharacterDestroyObject>().ballsHit;

        allScore = ballOneScore + ballTwoScore + ballThreeScore + mainCharacterScore;
        ballInvCounter = allScore - ballInvPrev;

        if (ballInvCounter >= circlesNeeded) {
            ballInvPrev += 15; //try 15, otherwise turn back to ballInvCounter
            ballInvCounter = ballInvCounter - ballInvPrev; 
            ballInvCharges += 1;
            GameObject.Find("PlayOnInvulnCharge").GetComponent<AudioSource>().Play();
        }

        if ((Input.GetKeyDown(KeyCode.Space)) && ballInvCharges >= 1 && hasSpacebar) {
            ballInvCharges -= 1;
            mainCharacter.GetComponent<DieOnImpact>().isInvulnerable = true;
            //sets main character colour to blue
            mat.color = firstColor;
            Invoke("resetInvulnCircle", 5.0f);
        }
        
    }

    public void resetInvulnCircle() {
            mainCharacter.GetComponent<DieOnImpact>().isInvulnerable = false;
            mat.color = secondColor;
            //sets main character colour to original
    }
}
